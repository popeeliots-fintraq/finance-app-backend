# finance-app-backend/schemas/orchestration_data.py

from pydantic import BaseModel, Field, condecimal
from decimal import Decimal
from typing import List, Optional, Dict, Any
from datetime import date

# Use condecimal for precise financial values
FinancialDecimal = condecimal(max_digits=12, decimal_places=2)


# ----------------------------------------------------------------------
# V2 Behavioral ML & Real-Time Recalculation (NEW SCHEMAS)
# ----------------------------------------------------------------------

class ProactiveInsight(BaseModel):
    """
    Schema for a single proactive 'Insight Card' generated by the InsightService.
    This replaces charts/dashboards with actionable nudges.
    """
    type: str = Field(..., description="The insight type (e.g., 'CRITICAL_LEAK_WARNING', 'RECLAIMED_FUNDS_SUMMARY').")
    title: str = Field(..., description="The headline text for the insight card.")
    body: str = Field(..., description="The detailed, actionable message.")
    action: str = Field(..., description="The required user action hook (e.g., 'VIEW_LEAK_IMPACT', 'VIEW_SUGGESTION_PLAN').")
    priority: int = Field(..., description="Priority level for display (0 is highest).")


class RecalculationResponse(BaseModel):
    """
    Schema for the response after a transaction triggers the Autopilot Orchestration.
    This data drives the app's immediate state update (e.g., in a background worker).
    """
    projected_reclaimable: FinancialDecimal = Field(Decimal("0.00"), description="The new total reclaimed salary MTD.")
    insights: List[ProactiveInsight] = Field(..., description="List of current proactive and reactive insight cards for the user.")


# ----------------------------------------------------------------------
# V2 Guided Orchestration: Suggestion & Consent
# ----------------------------------------------------------------------

# --- 1. Output Schema for /autopilot/suggestion-plan (Suggestion) ---

class SuggestedAllocation(BaseModel):
    """Details of a single suggested allocation based on a Smart Rule."""
    
    rule_id: int = Field(..., description="The ID of the Smart Rule (Goal, Tax Saving).")
    rule_name: str = Field(..., description="The name of the Smart Rule (e.g., 'Emergency Stash').") # Added for clarity
    destination: str = Field(..., description="The target destination (e.g., Goal 'Vacation Fund', Tax Instrument 'ELSS').")
    transfer_amount: FinancialDecimal = Field(Decimal("0.00"), description="The amount suggested to allocate to this destination (aligned with service method).") # Renamed field
    type: str = Field(..., description="The type of transfer (e.g., 'Goal', 'Tax Saving').")


class ConsentPlanOut(BaseModel):
    """
    Schema for the Consent Suggestion Plan. This is a READ-ONLY view of 
    how reclaimable money SHOULD be spent, awaiting user consent.
    (Matches generate_consent_suggestion_plan service method output)
    """
    available_fund: FinancialDecimal = Field(Decimal("0.00"), description="Total reclaimable salary available for suggestion.")
    total_suggested: FinancialDecimal = Field(Decimal("0.00"), description="Total amount allocated across all Smart Rules.")
    remaining_unallocated: FinancialDecimal = Field(Decimal("0.00"), description="Leftover fund after rules are satisfied (aligned with service method).") # Renamed field
    suggestion_plan: List[SuggestedAllocation] = Field(..., description="The suggested allocation plan for the available fund.")
    message: str = Field(..., description="A status message for the generated plan.")


# --- 2. Input Schema for /autopilot/consent (Consent Action) ---

class ConsentTransferItem(BaseModel):
    """Schema for a single item the user is consenting to transfer."""
    rule_id: int = Field(..., description="The ID of the Smart Rule being executed.")
    transfer_amount: FinancialDecimal = Field(..., gt=Decimal("0.00"), description="The exact amount consented for this rule.")

class ConsentMoveIn(BaseModel):
    """
    Input schema for the user consenting to move funds.
    We pass back the *specific* plan items the user consented to execute.
    """
    reporting_period: str = Field(..., description="The month/period the consent applies to (YYYY-MM-DD).")
    transfer_plan: List[ConsentTransferItem] = Field(..., description="List of specific rules and amounts the user is consenting to execute.")


# --- 3. Output Schema for /autopilot/consent (Consent Result) ---

class ConsentMoveOut(BaseModel):
    """
    Output schema after the consent has been successfully recorded.
    (Matches record_consent_and_update_balance service method output)
    """
    status: str = Field(..., description="Execution status ('success' or 'failure').")
    message: str = Field(..., description="Confirmation message for the successful consent and balance update.")
    total_transferred: FinancialDecimal = Field(Decimal("0.00"), description="The cumulative total of funds transferred in this batch.")
    transfers_executed: List[Dict[str, Any]] = Field(..., description="The list of transfers that were successfully executed/logged.")
