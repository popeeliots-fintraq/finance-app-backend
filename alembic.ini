# MIGRATION_FILE_NAME_V2_ADD_ML_AUDIT_TABLES.py (Example Content)

"""Add FinancialProfile table and salary_profile_id to Transaction"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql.sqltypes import DECIMAL, DateTime

# revision identifiers, used by Alembic.
revision = '...' # Placeholder: Will be generated by Alembic
down_revision = '...' # Placeholder: Should reference previous revision
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # 1. CREATE FINANCIAL_PROFILE TABLE (The ML/DMB Logic Store)
    op.create_table(
        'financial_profile',
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('e_family_size', DECIMAL(5, 2), nullable=False, server_default=sa.text('1.00'), comment='The calculated Equivalent Family Size (EFS) factor.'),
        sa.Column('benchmark_efficiency_factor', DECIMAL(5, 4), nullable=False, server_default=sa.text('1.0000'), comment='Efficiency factor derived from benchmarking peers.'),
        sa.Column('essential_target', DECIMAL(12, 2), nullable=False, server_default=sa.text('0.00'), comment='The total calculated Dynamic Minimal Baseline (DMB).'),
        sa.Column('baseline_adjustment_factor', DECIMAL(5, 4), nullable=False, server_default=sa.text('0.0000'), comment='The ratio of DMB to Net Income.'),
        sa.Column('last_calculated_at', DateTime(), nullable=True),
        
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('user_id')
    )
    
    # 2. ADD AUDIT FIELD TO TRANSACTIONS TABLE (Orchestration Fortification)
    op.add_column(
        'transactions', 
        sa.Column(
            'salary_profile_id', 
            sa.Integer(), 
            nullable=True, 
            comment='Link the Autopilot transaction to its source Salary Allocation Profile ID for auditing (Gap #3 Fortification).'
        )
    )
    op.create_foreign_key(
        'fk_transactions_salary_profile',
        'transactions', 
        'salary_allocation_profile',
        ['salary_profile_id'], 
        ['id']
    )
    
    # 3. Add EFS Input Columns to the existing USERS table (as defined in your models)
    op.add_column('users', sa.Column('num_adults', sa.Integer(), server_default=sa.text('1'), nullable=False))
    op.add_column('users', sa.Column('num_dependents_under_6', sa.Integer(), server_default=sa.text('0'), nullable=False))
    op.add_column('users', sa.Column('num_dependents_6_to_17', sa.Integer(), server_default=sa.text('0'), nullable=False))
    op.add_column('users', sa.Column('num_dependents_over_18', sa.Integer(), server_default=sa.text('0'), nullable=False))
    # Assuming 'monthly_salary', 'city_tier', 'income_slab' are also new, or ensuring they exist
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'num_dependents_over_18')
    op.drop_column('users', 'num_dependents_6_to_17')
    op.drop_column('users', 'num_dependents_under_6')
    op.drop_column('users', 'num_adults')
    
    op.drop_constraint('fk_transactions_salary_profile', 'transactions', type_='foreignkey')
    op.drop_column('transactions', 'salary_profile_id')
    
    op.drop_table('financial_profile')
    # ### end Alembic commands ###
