# services/orchestration_service.py

from decimal import Decimal, ROUND_HALF_UP
from typing import Dict, Any, List
from sqlalchemy.orm import Session
from datetime import date, datetime
from sqlalchemy.exc import NoResultFound
from fastapi import HTTPException, statusÂ 

# ðŸš¨ CRITICAL FIX: Import the Scaling Logic for DMB calculation
# NOTE: Assuming this path is correct for your ML engine
from ..ml.scaling_logic import calculate_dynamic_baseline

# Import the models needed
from ..db.base import User, FinancialProfile
from ..db.models import SalaryAllocationProfile, SmartTransferRuleÂ 
# NOTE: Assuming the EFS calculator is accessible here
from ..ml.efs_calculator import calculate_equivalent_family_size


class OrchestrationService:
Â  Â  """
Â  Â  Core service class for Fin-Traq's Salary Autopilot (Guided Execution).
Â  Â  It handles EFS/DMB calculation, manages the reclaimable salary fund,
Â  Â  and generates goal/stash suggestions based on Smart Rules.
Â  Â  """

Â  Â  def __init__(self, db: Session, user_id: int):
Â  Â  Â  Â  self.db = db
Â  Â  Â  Â  self.user_id = user_id
Â  Â  Â  Â Â 
Â  Â  # ----------------------------------------------------------------------
Â  Â  # V2 ML LOGIC INTEGRATION (EFS + Dynamic Baseline Calculation)
Â  Â  # ----------------------------------------------------------------------
Â  Â  def calculate_and_save_financial_profile(self) -> FinancialProfile:
Â  Â  Â  Â  """
Â  Â  Â  Â  Calculates the EFS, then uses the EFS and income to calculate the DynamicÂ 
Â  Â  Â  Â  Minimal Baseline (DMB) and Leakage Thresholds for Stratified Dependent Scaling.
Â  Â  Â  Â  This runs as a part of the daily or monthly batch job.
Â  Â  Â  Â  """
Â  Â  Â  Â Â 
Â  Â  Â  Â  # 1. Fetch User Data
Â  Â  Â  Â  user = self.db.query(User).filter(User.id == self.user_id).first()
Â  Â  Â  Â  if not user:
Â  Â  Â  Â  Â  Â  raise HTTPException(
Â  Â  Â  Â  Â  Â  Â  Â  status_code=status.HTTP_404_NOT_FOUND,
Â  Â  Â  Â  Â  Â  Â  Â  detail=f"User ID {self.user_id} not found."
Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  # 2. Fetch or Create Financial Profile
Â  Â  Â  Â  profile = self.db.query(FinancialProfile).filter(FinancialProfile.user_id == self.user_id).first()
Â  Â  Â  Â  if not profile:
Â  Â  Â  Â  Â  Â  profile = FinancialProfile(user_id=self.user_id)
Â  Â  Â  Â  Â  Â  self.db.add(profile)
Â  Â  Â  Â  Â  Â  self.db.flush()Â 

Â  Â  Â  Â  # 3. Calculate EFS (Required for Stratified Dependent Scaling)
Â  Â  Â  Â  profile_data = {
Â  Â  Â  Â  Â  Â  'num_adults': user.num_adults if user.num_adults is not None else 0,
Â  Â  Â  Â  Â  Â  'num_dependents_under_6': user.num_dependents_under_6 if user.num_dependents_under_6 is not None else 0,
Â  Â  Â  Â  Â  Â  'num_dependents_6_to_17': user.num_dependents_6_to_17 if user.num_dependents_6_to_17 is not None else 0,
Â  Â  Â  Â  Â  Â  'num_dependents_over_18': user.num_dependents_over_18 if user.num_dependents_over_18 is not None else 0,
Â  Â  Â  Â  }
Â  Â  Â  Â  new_efs_value = calculate_equivalent_family_size(profile_data)
Â  Â  Â  Â Â 
Â  Â  Â  Â  # 4. Calculate Dynamic Baselines (Leakage Thresholds)
Â  Â  Â  Â  net_income = user.monthly_salary if user.monthly_salary is not None else Decimal("0.00")
Â  Â  Â  Â Â 
Â  Â  Â  Â  # NOTE: We must pass all required arguments, including placeholders like city_tier,
Â  Â  Â  Â  # income_slab, and benchmark_efficiency_factor (defaults to None if not implemented yet)
Â  Â  Â  Â  baseline_results = calculate_dynamic_baseline(
Â  Â  Â  Â  Â  Â  net_income=net_income,
Â  Â  Â  Â  Â  Â  equivalent_family_size=new_efs_value,
Â  Â  Â  Â  Â  Â  city_tier=user.city_tier, 
Â  Â  Â  Â  Â  Â  income_slab=user.income_slab,
Â  Â  Â  Â  Â  Â  benchmark_efficiency_factor=None 
Â  Â  Â  Â  )

Â  Â  Â  Â  # 5. Persist all calculated results to the FinancialProfile
Â  Â  Â  Â  profile.e_family_size = new_efs_value
Â  Â  Â  Â Â 
Â  Â  Â  Â  # FinancialProfile.essential_target stores the Total_Leakage_Threshold for V2
Â  Â  Â  Â  leakage_threshold = baseline_results.get("Total_Leakage_Threshold", Decimal("0.00"))
Â  Â  Â  Â  profile.essential_target = leakage_threshold
Â  Â  Â  Â Â 
Â  Â  Â  Â  # Calculate the final adjustment factor (Total Leakage Threshold / Net Income)
Â  Â  Â  Â  if net_income > Decimal("0.00"):
Â  Â  Â  Â  Â  Â  profile.baseline_adjustment_factor = (leakage_threshold / net_income).quantize(Decimal("0.0001"))
Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  profile.baseline_adjustment_factor = Decimal("0.00")

Â  Â  Â  Â  profile.last_calculated_at = datetime.utcnow()
Â  Â  Â  Â Â 
Â  Â  Â  Â  self.db.commit()
Â  Â  Â  Â  return profile

Â  Â  # ----------------------------------------------------------------------
Â  Â  # CORE ORCHESTRATION LOGIC (GUIDED EXECUTION)
Â  Â  # ----------------------------------------------------------------------
Â  Â Â 
Â  Â  def _fetch_available_reclaimable_salary(self, reporting_period: date) -> SalaryAllocationProfile:
Â  Â  Â  Â  """Fetches the latest calculated salary profile for the period."""
Â  Â  Â  Â Â 
Â  Â  Â  Â  salary_profile = self.db.query(SalaryAllocationProfile).filter(
Â  Â  Â  Â  Â  Â  SalaryAllocationProfile.user_id == self.user_id,
Â  Â  Â  Â  Â  Â  SalaryAllocationProfile.reporting_period == reporting_period
Â  Â  Â  Â  ).first()

Â  Â  Â  Â  if not salary_profile:
Â  Â  Â  Â  Â  Â  # Return a dummy profile if none exists, ensuring service doesn't crash
Â  Â  Â  Â  Â  Â  return SalaryAllocationProfile(
Â  Â  Â  Â  Â  Â  Â  Â  projected_reclaimable_salary=Decimal("0.00")
Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  return salary_profile


Â  Â  def generate_consent_suggestion_plan(self, reporting_period: date) -> Dict[str, Any]:
Â  Â  Â  Â  """
Â  Â  Â  Â  Calculates how the reclaimable fund SHOULD be allocated across active Smart Rules
Â  Â  Â  Â  (Goals/Stashes) to achieve frictionless financial flow.
Â  Â  Â  Â  """
Â  Â  Â  Â  salary_profile = self._fetch_available_reclaimable_salary(reporting_period)

Â  Â  Â  Â  available_fund = salary_profile.projected_reclaimable_salary
Â  Â  Â  Â  remaining_fund = available_fund
Â  Â  Â  Â  suggestion_plan: List[Dict[str, Any]] = []
Â  Â  Â  Â  total_suggested = Decimal("0.00")
Â  Â  Â  Â Â 
Â  Â  Â  Â  if available_fund <= Decimal("500.00"): # Minimum threshold for meaningful action
Â  Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  Â  Â  "available_fund": available_fund.quantize(Decimal("0.01")),
Â  Â  Â  Â  Â  Â  Â  Â  "total_suggested": Decimal("0.00"),
Â  Â  Â  Â  Â  Â  Â  Â  "suggestion_plan": [],
Â  Â  Â  Â  Â  Â  Â  Â  "message": "Reclaimable salary below action threshold. Autopilot on standby."
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  # 1. Fetch all active Smart Rules (Goals/Stashes) for the user, ordered by priority
Â  Â  Â  Â  # NOTE: Assuming a 'priority' or 'creation_date' field for ordering.
Â  Â  Â  Â  active_rules = self.db.query(SmartTransferRule).filter(
Â  Â  Â  Â  Â  Â  SmartTransferRule.user_id == self.user_id,
Â  Â  Â  Â  Â  Â  SmartTransferRule.is_active == True
Â  Â  Â  Â  ).order_by(SmartTransferRule.priority.desc()).all() # Example ordering

Â  Â  Â  Â  # 2. Allocate the fund based on Smart Rules (Priority Allocation)
Â  Â  Â  Â  for rule in active_rules:
Â  Â  Â  Â  Â  Â  if remaining_fund <= Decimal("0.00"):
Â  Â  Â  Â  Â  Â  Â  Â  break
Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  # Allocation logic: Transfer the minimum of (Rule's Monthly Target, Remaining Fund)
Â  Â  Â  Â  Â  Â  transfer_amount = min(rule.target_amount_monthly, remaining_fund)
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  if transfer_amount > Decimal("0.00"):
Â  Â  Â  Â  Â  Â  Â  Â  suggestion_plan.append({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "rule_id": rule.id,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "rule_name": rule.name,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "transfer_amount": transfer_amount.quantize(Decimal("0.01")),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "destination": rule.destination_account_name,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "type": rule.rule_type # e.g., 'Goal', 'Stash', 'Tax Saving'
Â  Â  Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  remaining_fund -= transfer_amount
Â  Â  Â  Â  Â  Â  Â  Â  total_suggested += transfer_amount

Â  Â  Â  Â  # 3. Finalize and return the plan
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  "available_fund": available_fund.quantize(Decimal("0.01")),
Â  Â  Â  Â  Â  Â  "remaining_unallocated": remaining_fund.quantize(Decimal("0.01")),
Â  Â  Â  Â  Â  Â  "total_suggested": total_suggested.quantize(Decimal("0.01")),
Â  Â  Â  Â  Â  Â  "suggestion_plan": suggestion_plan,
Â  Â  Â  Â  Â  Â  "message": f"Autopilot suggests reallocating {total_suggested.quantize(Decimal('0.01'))} across active goals/stashes."
Â  Â  Â  Â  }

    # NOTE: The method 'record_consent_and_update_balance' would follow here 
    # to handle the user's acceptance of the plan and trigger the actual UPI transfers.
