# services/leakage_service.py

from decimal import Decimal, ROUND_HALF_UP
from typing import Dict, Any, List, Tuple
from sqlalchemy.orm import Session
from sqlalchemy.exc import NoResultFound
from datetime import date, timedelta
from sqlalchemy import func, and_

# CRITICAL FIX: Update imports to reflect the file structure
from ..ml.scaling_logic import calculate_dynamic_baselineÂ 
# ðŸš¨ NEW IMPORT: Benchmarking Service (Assuming it exists)
from .benchmarking_service import BenchmarkingServiceÂ 

# Import models
# NOTE: Assuming these imports are correct based on your previous messages
from ..db.base import User, FinancialProfile
from ..db.models import SalaryAllocationProfile, Transaction
from ..db.enums import TransactionTypeÂ 

# --- SERVICE CONSTANTS ---
# NOTE: Assuming this constant is defined elsewhere or imported, using a sensible default for the service
LOOKBACK_MONTHS = 4Â 
# Assuming FIXED_COMMITMENT_CATEGORIES is either imported or defined here (pulling the definition from fixed_commitment_service)
FIXED_COMMITMENT_CATEGORIES = [
Â  Â  "Rent/Mortgage EMI",
Â  Â  "Loan Repayment",
Â  Â  "Insurance Premium",
Â  Â  "Subscriptions & Dues (Annualized)",
Â  Â  "Utilities (Fixed Component)"Â 
]
# ðŸš¨ DEFINITION: Absolute floor for essential spending to prevent below-par living
GLOBAL_MINIMAL_BASELINE_FLOOR = Decimal("15000.00") # Placeholder for the absolute GMB

class LeakageService:
Â  Â  """
Â  Â  Core service class for calculating financial leakage based on the
Â  Â  Dynamic Minimal Baseline (Fin-Traq V2 Leak Finder).
Â  Â  """

Â  Â  def __init__(self, db: Session, user_id: int):
Â  Â  Â  Â  self.db = db
Â  Â  Â  Â  self.user_id = user_id

Â  Â  # ----------------------------------------------------------------------
Â  Â  # CORE V2 DMB CALCULATION HELPERS
Â  Â  # ----------------------------------------------------------------------
Â  Â Â 
Â  Â  def _calculate_user_historical_spend(self, reporting_period: date) -> Dict[str, Decimal]:
Â  Â  Â  Â  """
Â  Â  Â  Â  Retrieves and aggregates the median monthly spend for discretionary categoriesÂ 
Â  Â  Â  Â  from the historical transactions.
Â  Â  Â  Â  """
Â  Â  Â  Â  # Uses the lookback period from the Fixed Commitment logic
Â  Â  Â  Â  start_date = reporting_period - timedelta(days=30 * LOOKBACK_MONTHS)Â 

Â  Â  Â  Â  # Query all non-fixed transactions in the lookback period
Â  Â  Â  Â  variable_transactions = self.db.query(Transaction).filter(
Â  Â  Â  Â  Â  Â  Transaction.user_id == self.user_id,
Â  Â  Â  Â  Â  Â  Transaction.transaction_date >= start_date,
Â  Â  Â  Â  Â  Â  Transaction.transaction_date < reporting_period,
Â  Â  Â  Â  Â  Â  # Exclude Fixed Commitments that were handled separately
Â  Â  Â  Â  Â  Â  ~Transaction.category.in_(FIXED_COMMITMENT_CATEGORIES),
Â  Â  Â  Â  Â  Â  Transaction.transaction_type == TransactionType.DEBIT # Focus on spends
Â  Â  Â  Â  ).all()

Â  Â  Â  Â  # Group by month and category
Â  Â  Â  Â  monthly_category_spends: Dict[str, Dict[date, Decimal]] = {}
Â  Â  Â  Â Â 
Â  Â  Â  Â  for tx in variable_transactions:
Â  Â  Â  Â  Â  Â  month_start = tx.transaction_date.replace(day=1)
Â  Â  Â  Â  Â  Â  if tx.category not in monthly_category_spends:
Â  Â  Â  Â  Â  Â  Â  Â  monthly_category_spends[tx.category] = {}
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  # Calculate monthly total per category
Â  Â  Â  Â  Â  Â  monthly_category_spends[tx.category][month_start] = (
Â  Â  Â  Â  Â  Â  Â  Â  monthly_category_spends[tx.category].get(month_start, Decimal("0.00")) + tx.amount
Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â Â 
Â  Â  Â  Â  # Calculate the median of the monthly totals for each category
Â  Â  Â  Â  historical_median_spends: Dict[str, Decimal] = {}
Â  Â  Â  Â Â 
Â  Â  Â  Â  for category, monthly_data in monthly_category_spends.items():
Â  Â  Â  Â  Â  Â  if not monthly_data:
Â  Â  Â  Â  Â  Â  Â  Â  continue
Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  # Median is more robust than average against single-month spikes
Â  Â  Â  Â  Â  Â  monthly_totals = sorted(list(monthly_data.values()))
Â  Â  Â  Â  Â  Â  n = len(monthly_totals)
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  # Calculate median
Â  Â  Â  Â  Â  Â  if n % 2 == 1:
Â  Â  Â  Â  Â  Â  Â  Â  median = monthly_totals[n // 2]
Â  Â  Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  Â  Â  median = (monthly_totals[n // 2 - 1] + monthly_totals[n // 2]) / Decimal("2.00")
Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  historical_median_spends[category] = median.quantize(Decimal("0.01"))
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  return historical_median_spends

Â  Â  def calculate_final_dmb_with_history(
Â  Â  Â  Â  self,
Â  Â  Â  Â  reporting_period: date,
Â  Â  Â  Â  dynamic_baselines: Dict[str, Decimal] # The EFS-scaled thresholds from ML
Â  Â  ) -> Tuple[Dict[str, Decimal], Dict[str, Decimal]]:
Â  Â  Â  Â  """
Â  Â  Â  Â  Applies the MAX(EFS-Threshold, User Median Spend) logic to finalize the DMB.
Â  Â  Â  Â  This sets the true DMB against which current month leakage is compared.
Â  Â  Â  Â Â 
Â  Â  Â  Â  Returns:
Â  Â  Â  Â  Â  Â  Tuple[Dict[str, Decimal], Dict[str, Decimal]]:Â 
Â  Â  Â  Â  Â  Â  (final_category_dmb, historical_median_spends)
Â  Â  Â  Â  """
Â  Â  Â  Â Â 
Â  Â  Â  Â  # 1. Get the user's historical spend metrics
Â  Â  Â  Â  historical_median_spends = self._calculate_user_historical_spend(reporting_period)
Â  Â  Â  Â  final_category_dmb: Dict[str, Decimal] = {}
Â  Â  Â  Â Â 
Â  Â  Â  Â  # 2. --- DMB Calculation: MAX(EFS Floor, User Median) ---
Â  Â  Â  Â  for category, efs_threshold in dynamic_baselines.items():
Â  Â  Â  Â  Â  Â  # Exclude non-spending metrics from the MAX logic
Â  Â  Â  Â  Â  Â  if category in ["Total_Leakage_Threshold", "Total_Minimal_Need_DMB", "Potential_Recoverable_Fund"]:
Â  Â  Â  Â  Â  Â  Â  Â  final_category_dmb[category] = efs_thresholdÂ 
Â  Â  Â  Â  Â  Â  Â  Â  continue
Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  # Fetch the user's historical median for this category
Â  Â  Â  Â  Â  Â  user_median = historical_median_spends.get(category, Decimal("0.00"))
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  # Core DMB Logic: Set the DMB to the higher of the two values.
Â  Â  Â  Â  Â  Â  # EFS-Threshold is the non-negotiable floor; User Median is the ceiling for soft budgeting.
Â  Â  Â  Â  Â  Â  category_dmb = max(efs_threshold, user_median)
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  final_category_dmb[category] = category_dmb.quantize(Decimal("0.01"))

Â  Â  Â  Â  return final_category_dmb, historical_median_spends


Â  Â  # ----------------------------------------------------------------------
Â  Â  # ORCHESTRATION & PERSISTENCE
Â  Â  # ----------------------------------------------------------------------
Â  Â Â 
Â  Â  def _fetch_profile_data_and_baselines(self, reporting_period: date) -> Dict[str, Any]:
Â  Â  Â  Â  """
Â  Â  Â  Â  Fetches required user financial data and calculates EFS-Scaled DMB/Thresholds.
Â  Â  Â  Â  """
Â  Â  Â  Â Â 
Â  Â  Â  Â  # 1. Fetch or Create the Salary Allocation Profile (to get Net Income)
Â  Â  Â  Â  salary_profile = self.db.query(SalaryAllocationProfile).filter(
Â  Â  Â  Â  Â  Â  SalaryAllocationProfile.user_id == self.user_id,
Â  Â  Â  Â  Â  Â  SalaryAllocationProfile.reporting_period == reporting_period
Â  Â  Â  Â  ).first()

Â  Â  Â  Â  # 2. Fetch User data (needed for income_slab and city_tier)
Â  Â  Â  Â  user_info = self.db.query(User).filter(User.id == self.user_id).first()
Â  Â  Â  Â  if not user_info:
Â  Â  Â  Â  Â  Â  raise NoResultFound(f"User ID {self.user_id} not found.")

Â  Â  Â  Â  if not salary_profile:
Â  Â  Â  Â  Â  Â  # ðŸš¨ FAILURE PREVENTION: If profile is missing, create a new one.
Â  Â  Â  Â  Â  Â  salary_profile = SalaryAllocationProfile(
Â  Â  Â  Â  Â  Â  Â  Â  user_id=self.user_id,
Â  Â  Â  Â  Â  Â  Â  Â  reporting_period=reporting_period,
Â  Â  Â  Â  Â  Â  Â  Â  net_monthly_income=user_info.monthly_salary,
Â  Â  Â  Â  Â  Â  Â  Â  fixed_commitment_total=Decimal("0.00"), # Needs calculation by FixedCommitmentService
Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  self.db.add(salary_profile)
Â  Â  Â  Â  Â  Â  self.db.flush()Â 

Â  Â  Â  Â  # 3. Fetch the Financial Profile (which now holds EFS)
Â  Â  Â  Â  profile = self.db.query(FinancialProfile).filter(FinancialProfile.user_id == self.user_id).first()

Â  Â  Â  Â  if not profile or not profile.e_family_size:
Â  Â  Â  Â  Â  Â  raise NoResultFound("Financial Profile or Equivalent Family Size not found. Run OrchestrationService first to calculate EFS.")
Â  Â  Â  Â Â 
Â  Â  Â  Â  # 4. Calculate Benchmarking Factor using the new service (Batch Process)
Â  Â  Â  Â  # NOTE: BenchmarkingService.calculate_efficiency_factor should ideally use a cached result here.
Â  Â  Â  Â  benchmarking_service = BenchmarkingService(self.db, self.user_id)
Â  Â  Â  Â  benchmark_factor = benchmarking_service.calculate_efficiency_factor(
Â  Â  Â  Â  Â  Â  current_efs=profile.e_family_size,
Â  Â  Â  Â  Â  Â  current_fixed_total=salary_profile.fixed_commitment_total,
Â  Â  Â  Â  Â  Â  city_tier=user_info.city_tier,Â 
Â  Â  Â  Â  Â  Â  net_income=salary_profile.net_monthly_income
Â  Â  Â  Â  )

Â  Â  Â  Â  # 5. Calculate EFS-Scaled Baselines (ML Output)
Â  Â  Â  Â  baseline_results = calculate_dynamic_baseline(
Â  Â  Â  Â  Â  Â  net_income=salary_profile.net_monthly_income,
Â  Â  Â  Â  Â  Â  equivalent_family_size=profile.e_family_size,
Â  Â  Â  Â  Â  Â  city_tier=user_info.city_tier,
Â  Â  Â  Â  Â  Â  income_slab=user_info.income_slab, # Assuming this is correctly fetched
Â  Â  Â  Â  Â  Â  benchmark_efficiency_factor=benchmark_factor # Factor is None if cohort is too small
Â  Â  Â  Â  )

Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  "net_monthly_income": salary_profile.net_monthly_income,
Â  Â  Â  Â  Â  Â  "dynamic_baselines": baseline_results, # EFS-Scaled Thresholds
Â  Â  Â  Â  Â  Â  "efs": profile.e_family_size,
Â  Â  Â  Â  Â  Â  "salary_profile": salary_profileÂ 
Â  Â  Â  Â  }

Â  Â  def _get_current_month_spends(self, reporting_period: date) -> Dict[str, Decimal]:
Â  Â  Â  Â  """
Â  Â  Â  Â  CRITICAL: Retrieves the month-to-date (MTD) variable spend, categorized.
Â  Â  Â  Â  This replaces the _mock_leakage_spends function.
Â  Â  Â  Â  """
Â  Â  Â  Â  # Calculate start of the reporting period (current month)
Â  Â  Â  Â  start_date = reporting_period
Â  Â  Â  Â Â 
Â  Â  Â  Â  # Query MTD variable spending
Â  Â  Â  Â  mtd_spends_query = self.db.query(
Â  Â  Â  Â  Â  Â  Transaction.category,
Â  Â  Â  Â  Â  Â  func.sum(Transaction.amount).label("total_spend")
Â  Â  Â  Â  ).filter(
Â  Â  Â  Â  Â  Â  Transaction.user_id == self.user_id,
Â  Â  Â  Â  Â  Â  Transaction.transaction_date >= start_date,
Â  Â  Â  Â  Â  Â  Transaction.transaction_date <= date.today(), # Only up to today's date
Â  Â  Â  Â  Â  Â  ~Transaction.category.in_(FIXED_COMMITMENT_CATEGORIES),
Â  Â  Â  Â  Â  Â  Transaction.transaction_type == TransactionType.DEBIT
Â  Â  Â  Â  ).group_by(Transaction.category).all()
Â  Â  Â  Â Â 
Â  Â  Â  Â  # Format results into a dictionary
Â  Â  Â  Â  mtd_spends: Dict[str, Decimal] = {
Â  Â  Â  Â  Â  Â  row.category: Decimal(row.total_spend).quantize(Decimal("0.01"))
Â  Â  Â  Â  Â  Â  for row in mtd_spends_query
Â  Â  Â  Â  }
Â  Â  Â  Â Â 
Â  Â  Â  Â  # Add mock PD categories that might not be in the query if no spend occurred
Â  Â  Â  Â  # NOTE: These keys must match the category names used in the leak calculation loops
Â  Â  Â  Â  mtd_spends["Pure_Discretionary_DiningOut"] = mtd_spends.get("Pure_Discretionary_DiningOut", Decimal("0.00"))
Â  Â  Â  Â  mtd_spends["Pure_Discretionary_Gadget"] = mtd_spends.get("Pure_Discretionary_Gadget", Decimal("0.00"))
Â  Â  Â  Â Â 
Â  Â  Â  Â  return mtd_spends

Â  Â  def calculate_leakage(self, reporting_period: date) -> Dict[str, Any]:
Â  Â  Â  Â  """
Â  Â  Â  Â  Calculates leakage amount using the refined MAX(EFS-Threshold, User Median) DMB.
Â  Â  Â  Â  """

Â  Â  Â  Â  try:
Â  Â  Â  Â  Â  Â  profile_data = self._fetch_profile_data_and_baselines(reporting_period)
Â  Â  Â  Â  except NoResultFound as e:
Â  Â  Â  Â  Â  Â  raise Exception(f"Failed to initialize Leakage Service: {e}")

Â  Â  Â  Â  # 1. Finalize DMB using EFS-Threshold (Floor) and User Median (Ceiling)
Â  Â  Â  Â  efs_thresholds = profile_data["dynamic_baselines"]
Â  Â  Â  Â Â 
Â  Â  Â  Â  # final_dmb contains the actual baseline for each category (MAX logic applied)
Â  Â  Â  Â  final_dmb, historical_median_spends = self.calculate_final_dmb_with_history(
Â  Â  Â  Â  Â  Â  reporting_period, efs_thresholds
Â  Â  Â  Â  )

Â  Â  Â  Â  # 2. Get the current month's actual spend data
Â  Â  Â  Â  current_spends = self._get_current_month_spends(reporting_period)

Â  Â  Â  Â  leakage_buckets: List[Dict[str, Any]] = []
Â  Â  Â  Â  total_leakage = Decimal("0.00")

Â  Â  Â  Â  # --- 3. Calculate Leakage for SCALED Categories (VE & SD) ---
Â  Â  Â  Â  for category, dmb_threshold in final_dmb.items():

Â  Â  Â  Â  Â  Â  if category in ["Total_Leakage_Threshold", "Total_Minimal_Need_DMB", "Potential_Recoverable_Fund"]:
Â  Â  Â  Â  Â  Â  Â  Â  continue

Â  Â  Â  Â  Â  Â  spend = current_spends.get(category, Decimal("0.00"))
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  # Leak: Max(0, Actual Spend - Final DMB)
Â  Â  Â  Â  Â  Â  leak_amount = max(Decimal("0.00"), spend - dmb_threshold)

Â  Â  Â  Â  Â  Â  if spend > Decimal("0.00"):
Â  Â  Â  Â  Â  Â  Â  Â  if leak_amount > Decimal("0.00"):
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  total_leakage += leak_amount
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  leak_source_description = "Above Dynamic Minimal Baseline"
Â  Â  Â  Â  Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  leak_source_description = "Within Baseline (Achieving Flow)"

Â  Â  Â  Â  Â  Â  Â  Â  leakage_buckets.append({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "category": category.replace('_', ' ').title(),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "baseline_threshold": dmb_threshold.quantize(Decimal("0.01")),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "spend": spend.quantize(Decimal("0.01")),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "leak_source": leak_source_description,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "leak_amount": leak_amount.quantize(Decimal("0.01")),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "leak_percentage_of_spend": f"{(leak_amount / spend) * 100:.2f}%" if spend > Decimal("0.00") else "0.00%"
Â  Â  Â  Â  Â  Â  Â  Â  })

Â  Â  Â  Â  # --- 4. Calculate Leakage for PURE DISCRETIONARY (PD) Categories ---
Â  Â  Â  Â  pd_categories = ["Pure_Discretionary_DiningOut", "Pure_Discretionary_Gadget"]

Â  Â  Â  Â  for category in pd_categories:
Â  Â  Â  Â  Â  Â  spend = current_spends.get(category, Decimal("0.00"))

Â  Â  Â  Â  Â  Â  if spend > Decimal("0.00"):
Â  Â  Â  Â  Â  Â  Â  Â  leak_amount = spend
Â  Â  Â  Â  Â  Â  Â  Â  total_leakage += leak_amount

Â  Â  Â  Â  Â  Â  Â  Â  leakage_buckets.append({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "category": category.replace('_', ' ').title(),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "baseline_threshold": Decimal("0.00").quantize(Decimal("0.01")), # Always zero for PD
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "spend": spend.quantize(Decimal("0.01")),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "leak_source": "100% Discretionary Spend (Goal Opportunity)",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "leak_amount": leak_amount.quantize(Decimal("0.01")),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "leak_percentage_of_spend": "100.00%"
Â  Â  Â  Â  Â  Â  Â  Â  })

Â  Â  Â  Â  # 5. Apply GMB Guardrail to Total Leakage (Behavioral Failure Prevention)
Â  Â  Â  Â  net_income = profile_data["salary_profile"].net_monthly_income
Â  Â  Â  Â  fixed_commitments = profile_data["salary_profile"].fixed_commitment_total
Â  Â  Â  Â Â 
Â  Â  Â  Â  # Total necessary fixed + GMB floor
Â  Â  Â  Â  absolute_floor = fixed_commitments + GLOBAL_MINIMAL_BASELINE_FLOOR
Â  Â  Â  Â Â 
Â  Â  Â  Â  # Max Leakage is Net Income minus Absolute Floor
Â  Â  Â  Â  max_possible_leakage = max(Decimal("0.00"), net_income - absolute_floor)
Â  Â  Â  Â Â 
Â  Â  Â  Â  # The projected reclaimable salary cannot exceed this maximum possible leakage
Â  Â  Â  Â  projected_reclaimable_salary = min(total_leakage, max_possible_leakage)


Â  Â  Â  Â  # ðŸš¨ CRITICAL STEP: PERSIST THE LEAKAGE RESULT TO THE DB
Â  Â  Â  Â  salary_profile = profile_data["salary_profile"]
Â  Â  Â  Â  salary_profile.projected_reclaimable_salary = projected_reclaimable_salary
Â  Â  Â  Â  salary_profile.variable_spend_total = sum(current_spends.values()) # Store total variable spend for reconciliation
Â  Â  Â  Â  self.db.commit()

Â  Â  Â  Â  # 6. Return the calculated data for immediate display
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  "total_leakage_amount": total_leakage.quantize(Decimal("0.01")),
Â  Â  Â  Â  Â  Â  "projected_reclaimable_salary": projected_reclaimable_salary.quantize(Decimal("0.01")),
Â  Â  Â  Â  Â  Â  "leakage_buckets": leakage_buckets
Â  Â  Â  Â  }
